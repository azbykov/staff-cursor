// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  firstName     String?
  lastName      String?
  password      String?
  role          Role        @default(EMPLOYEE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLogin     DateTime?
  deletedAt     DateTime?

  employee      Employee?
  invitations   Invitation[] @relation("InvitedBy")
  accounts      Account[]
  sessions      Session[]
}

model Company {
  id          String    @id @default(cuid())
  name        String
  size        CompanySize?
  industry    IndustryType?
  email       String?
  phone       String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  departments Department[]
  employees   Employee[]
  invitations Invitation[]
}

model Department {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  employees   Employee[]
  invitations Invitation[]
}

model Employee {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  position    String
  phone       String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   String
  department  Department @relation(fields: [departmentId], references: [id])
  departmentId String
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  token       String    @unique
  role        Role      @default(EMPLOYEE)
  status      String    @default("pending")
  expiresAt   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  companyId   String
  departmentId String?
  invitedById String

  company     Company   @relation(fields: [companyId], references: [id])
  department  Department? @relation(fields: [departmentId], references: [id])
  invitedBy   User      @relation("InvitedBy", fields: [invitedById], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  SYSTEM_ADMIN
  COMPANY_OWNER
  COMPANY_MANAGER
  EMPLOYEE
}

enum CompanySize {
  MICRO
  SMALL
  MEDIUM
  LARGE
}

enum IndustryType {
  IT
  FINANCE
  HEALTHCARE
  EDUCATION
  RETAIL
  MANUFACTURING
  CONSTRUCTION
  CONSULTING
  OTHER
}